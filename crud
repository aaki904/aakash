index.js

const express = require('express')
const bodyParser =require('body-parser')
const mongoose = require('mongoose')

const app = express()

const apiRouter = require('./api/router/routes')

app.use(bodyParser.urlencoded({ extended : false}))
app.use(bodyParser.json())
app.use('/api/',apiRouter)

mongoose.connect('mongodb://localhost:27017/p_data',{
	useNewUrlParser : true,
	useUnifiedTopology : true
},console.log('mongo connection done 27017'))

app.listen(3000,console.log("server started 3000"))


/////////////controller/usermodel.js///////////////////////////////////////

const usermodel = require('../models/user')

module.exports.register=(req,res)=>{
	console.log(req.body)
	usermodel.find({'email':req.body.email}).then((data)=>{
		console.log(data)

		if(data.length==0)
		{
			new usermodel({
				name:req.body.name,
				email:req.body.email,
				password:req.body.password
			}).save().then((data)=>{
				res.send("data inserted successfully")
			})
		}
		else
		{
			res.send("already exist")

		}
	})
}

module.exports.display=(req,res)=>{
	usermodel.find().then((data)=>{
		console.log(data)
		if(data.length==0)
		{
			console.log("no data found")
		}
	})
}
module.exports.showone=(req,res)=>{
	usermodel.find({},{name:1}).then((data)=>{
		console.log(data)
		if(data.length==0)
		{
			console.log("no data found")
		}
	})
}
module.exports.delete=(req,res)=>{
	usermodel.deleteOne({'email':req.body.email}).then((data)=>{
		if(data.length==0)
		{
			console.log("empty")
		}
		else
		{
			console.log("delete record")
		}
	})
}



/////////////////////////models/user.js//////////////////////////////////

const mongoose = require('mongoose')
const Schema = mongoose.Schema;
 bcrypt = require('bcrypt'),
    SALT_WORK_FACTOR = 10;

const userschema = new Schema({
	name:String,
	email:String,
	password:String
});

userschema.pre('save', function(next) {
    var user = this;

    // only hash the password if it has been modified (or is new)
    if (!user.isModified('password')) return next();

    // generate a salt
    bcrypt.genSalt(SALT_WORK_FACTOR, function(err, salt) {
        if (err) return next(err);

        // hash the password using our new salt
        bcrypt.hash(user.password, salt, function(err, hash) {
            if (err) return next(err);

            // override the cleartext password with the hashed one
            user.password = hash;
            next();
        });
    });
});

userschema.methods.comparePassword = function(candidatePassword, cb) {
    bcrypt.compare(candidatePassword, this.password, function(err, isMatch) {
        if (err) return cb(err);
        cb(null, isMatch);
    });
};

module.exports=mongoose.model('users',userschema);

/////////////////////////////////router/routes//////////////////////////////

const express = require('express');
const router = express.Router();
const User = require('../controller/usermodel');

router.post('/register',User.register);
router.get('/display',User.display);
router.get('/delete',User.delete);
router.get('/showone',User.showone);

module.exports = router;
